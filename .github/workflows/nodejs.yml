# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  directories: # Job that list subdirectories
    if: ${{ github.event_name == 'push'}}
    runs-on: ubuntu-latest
    outputs:
      dir: ${{ steps.set-dirs.outputs.dir }} # generate output name dir by using inner step output
    steps:
      - uses: actions/checkout@v2
      - id: set-dirs
        run: |
          cd ./plugins
          echo "::set-output name=dir::$(ls -d */ | jq -R -s -c 'split("\n")[:-1]')"

  prerrequisites:
    if: ${{ github.event_name == 'push'}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Globally installing yarn
        run: npm install -g yarn

  buildPlugins: # Loops all directories and builds plugins
    if: ${{ github.event_name == 'push'}}
    runs-on: ubuntu-latest
    needs: [directories, prerrequisites]
    strategy:
      matrix:
        dir: ${{ fromJson(needs.directories.outputs.dir) }}
    defaults:
      run: # Defaults for all run steps, not uses
        working-directory: ./plugins/${{ matrix.dir }}
    steps:
      - name: Install dependencies (yarn)
        run: yarn install --frozen-lockfile
 
      - name: Build and test frontend
        run: yarn build 

      - name: Sign plugin
        run: |
          export GRAFANA_API_KEY=${{ secrets.GRAFANA_API_KEY }}
          npx @grafana/toolkit plugin:sign --rootUrls http://localhost:5600,https://dashboard.galibo.governify.io,https://dashboard.bluejay.governify.io

      - name: Persist to workspace
        uses: actions/upload-artifact@v2
        with:
          path: |
            ./plugins/${{ matrix.dir }}jobs/package
            ./plugins/${{ matrix.dir }}packages
            ./plugins/${{ matrix.dir }}dist
            ./plugins/${{ matrix.dir }}grafana-test-env

  buildProd:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push'}}
    needs: buildPlugins
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: governify/dashboard:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}  
  buildTest:
    if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    needs: buildPlugins
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: governify/dashboard:develop
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}